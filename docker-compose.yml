version: '3.8'

services:
  # AgentSystem Main Application
  agentsystem:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agentsystem-app
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://agentsystem:${DB_PASSWORD:-secure_password}@postgres:5432/agentsystem
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - LOG_LEVEL=info
      - ENABLE_METRICS=true
    volumes:
      - agentsystem_data:/app/data
      - agentsystem_logs:/app/logs
      - agentsystem_backups:/app/backups
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - agentsystem-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: agentsystem-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=agentsystem
      - POSTGRES_USER=agentsystem
      - POSTGRES_PASSWORD=${DB_PASSWORD:-secure_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - agentsystem-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agentsystem -d agentsystem"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: agentsystem-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - agentsystem-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s

  # Celery Worker for Background Tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agentsystem-celery-worker
    restart: unless-stopped
    command: celery -A AgentSystem.celery_app worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://agentsystem:${DB_PASSWORD:-secure_password}@postgres:5432/agentsystem
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - LOG_LEVEL=info
    volumes:
      - agentsystem_data:/app/data
      - agentsystem_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - agentsystem-network

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agentsystem-celery-beat
    restart: unless-stopped
    command: celery -A AgentSystem.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://agentsystem:${DB_PASSWORD:-secure_password}@postgres:5432/agentsystem
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - LOG_LEVEL=info
    volumes:
      - agentsystem_data:/app/data
      - agentsystem_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - agentsystem-network

  # Flower - Celery Monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agentsystem-flower
    restart: unless-stopped
    command: celery -A AgentSystem.celery_app flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - FLOWER_BASIC_AUTH=${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-flower_password}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - agentsystem-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: agentsystem-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - agentsystem
    networks:
      - agentsystem-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: agentsystem-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - agentsystem-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: agentsystem-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin_password}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    depends_on:
      - prometheus
    networks:
      - agentsystem-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  agentsystem_data:
    driver: local
  agentsystem_logs:
    driver: local
  agentsystem_backups:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  agentsystem-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
